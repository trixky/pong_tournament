{"ast":null,"code":"import { channel_gen } from \"../channels/chat_channel\";\nimport consumer from \"../channels/consumer\";\nimport { Friend, Friends } from \"../BackboneModel/friend_list_model\";\nimport { Battle, Battles } from \"../BackboneModel/battle_list_model\";\nimport { FriendsMessage, FriendsMessages } from \"../BackboneModel/friends_message_model\";\nvar ChatFriendMessageView = Backbone.View.extend({\n  render: function render() {\n    var date = new Date(this.model.get(\"date\"));\n    var date_string = date.getDate() + '/' + date.getMonth() + '/' + date.getFullYear() + '  ' + date.getHours() + ':' + date.getMinutes();\n    this.$el.html('<li class=\"message\"><p class=\"user-message\">' + this.model.get(\"username\") + '</p><p class=\"time-message\">' + date_string + '</p><br><p class=\"content-message\">' + this.model.get(\"content\") + '</p></li>');\n    return this;\n  }\n});\nvar ChatMessageView = Backbone.View.extend({\n  render: function render() {\n    var date = new Date(this.model.get(\"date\"));\n    var date_string = date.getDate() + '/' + date.getMonth() + '/' + date.getFullYear() + '  ' + date.getHours() + ':' + date.getMinutes();\n    this.$el.html('<li class=\"message\"><p class=\"user-message\">' + this.model.get(\"username\") + '</p><p class=\"time-message\">' + date_string + '</p><br><p class=\"content-message\">' + this.model.get(\"content\") + '</p></li>');\n    return this;\n  }\n});\nvar ChatNotificationView = Backbone.View.extend({\n  render: function render() {\n    var date = new Date(this.model.get(\"date\"));\n    var date_string = date.getDate() + '/' + date.getMonth() + '/' + date.getFullYear() + '  ' + date.getHours() + ':' + date.getMinutes();\n\n    if (this.model.get(\"type\") != undefined) {\n      if (this.model.get(\"type\") == 'friend-request') {\n        this.$el.html('<li class=\"notification\"><p class=\"time-notification-message\">' + date_string + '</p><br><p class=\"content-notification\">' + this.model.get(\"value\") + '</p><p class=\"accept-notification social-hover\">✓</p><p class=\"decline-notification social-hover\">✖</p></li>');\n      } else if (this.model.get(\"type\") == 'casual-battle') {\n        this.$el.html('<li class=\"notification\"><p class=\"time-notification-message\">' + date_string + '</p><br><p class=\"content-notification\">' + this.model.get(\"value\") + '</p><p class=\"accept-notification social-hover\">⚔</p><p class=\"decline-notification social-hover\">✖</p></li>');\n      }\n    }\n\n    return this;\n  }\n});\nvar ChatViews = Backbone.View.extend({\n  el: \".chat-message\",\n  disconnected: function disconnected(room) {\n    if (room != undefined) {\n      for (var i = 0; i < consumer.subscriptions.subscriptions.length; i++) {\n        if (JSON.parse(consumer.subscriptions.subscriptions[i].identifier).room == room && JSON.parse(consumer.subscriptions.subscriptions[i].identifier).channel == \"ChatChannel\") {\n          consumer.subscriptions.subscriptions[i].unsubscribe();\n        }\n\n        ;\n      }\n\n      ;\n    }\n  },\n  initialize: function initialize(options) {\n    this.notificationInChat = false;\n    this.friendInChat = undefined;\n    this.bus = options.bus;\n    this.bus.on(\"chatroomSelected\", this.chatroomSelected, this);\n    this.bus.on(\"chatroomRefresh\", this.chatroomRefresh, this);\n    this.bus.on(\"notificationReceived\", this.notificationReceived, this);\n    this.bus.on(\"notificationSelected\", this.notificationSelected, this);\n    this.bus.on(\"friendChatroomSelected\", this.friendChatroomSelected, this);\n    this.bus.on(\"friendChatroomRefresh\", this.friendChatroomRefresh, this);\n    this.bus.on(\"leaveChatroom\", this.leaveChatroom, this);\n    this.message_model = options.message_model;\n    this.notifications = options.notifications;\n    this.friendsMessages = options.friendsMessages;\n  },\n  select_chatroom_connection: function select_chatroom_connection() {\n    if (this.chatroom_model != undefined) {\n      for (var i = 0; i < consumer.subscriptions.subscriptions.length; i++) {\n        if (JSON.parse(consumer.subscriptions.subscriptions[i].identifier).room == this.chatroom_model.get(\"name\") && JSON.parse(consumer.subscriptions.subscriptions[i].identifier).channel == \"ChatChannel\") {\n          return consumer.subscriptions.subscriptions[i];\n        }\n\n        ;\n      }\n\n      ;\n    }\n  },\n  chatroomRefresh: function chatroomRefresh(data) {\n    if (this.chatroom_model != undefined && data[\"messageContent\"] == this.chatroom_model.get(\"name\")) this.render();\n  },\n  select_user_connection: function select_user_connection() {\n    for (var i = 0; i < consumer.subscriptions.subscriptions.length; i++) {\n      if (JSON.parse(consumer.subscriptions.subscriptions[i].identifier).channel == 'UserChannel') {\n        return consumer.subscriptions.subscriptions[i];\n      }\n\n      ;\n    }\n\n    ;\n  },\n  chatroomSelected: function chatroomSelected(chatroom) {\n    this.notificationInChat = false;\n    this.friendInChat = undefined;\n    var needToDisconnect = this.chatroom_model == undefined;\n\n    if (needToDisconnect || chatroom.get(\"name\") != this.chatroom_model.get(\"name\")) {\n      if (!needToDisconnect) {\n        this.disconnected(this.chatroom_model.get(\"name\"));\n      }\n\n      this.chatroom_model = chatroom;\n      this.render();\n    }\n  },\n  friendChatroomRefresh: function friendChatroomRefresh() {\n    this.render();\n  },\n  notificationReceived: function notificationReceived() {\n    var self = this;\n    self.notifications.fetch().then(function () {\n      if (self.notifications.length > 0) {\n        $(\".title-notification\").addClass(\"notification-blink\");\n      } else {\n        $(\".title-notification\").removeClass(\"notification-blink\");\n      }\n    });\n  },\n  notificationSelected: function notificationSelected() {\n    this.notificationInChat = true;\n    this.friendInChat = undefined;\n\n    if (this.chatroom_model != undefined) {\n      this.disconnected(this.chatroom_model.get(\"name\"));\n      this.chatroom_model = undefined;\n    }\n\n    $(\".title-notification\").removeClass(\"notification-blink\");\n    this.render();\n  },\n  friendChatroomSelected: function friendChatroomSelected(friend) {\n    this.friendInChat = friend.get(\"pseudo\");\n    this.notificationInChat = false;\n\n    if (this.chatroom_model != undefined) {\n      this.disconnected(this.chatroom_model.get(\"name\"));\n      this.chatroom_model = undefined;\n    }\n\n    $(\"#chat-top-bar > p#center\").data(\"friend-chat-open\", \"true\");\n    this.render();\n  },\n  leaveChatroom: function leaveChatroom(chatroom_name) {\n    this.notificationInChat = false;\n\n    if (this.chatroom_model && this.chatroom_model.get(\"name\") == chatroom_name) {\n      this.disconnected(chatroom_name);\n      this.chatroom_model = undefined;\n      this.notificationInChat = false;\n      this.render();\n    }\n  },\n  events: {\n    \"click #input-button\": \"onClick\",\n    \"keydown\": \"keyDown\"\n  },\n  onClick: function onClick() {\n    this.sendMessage();\n  },\n  keyDown: function keyDown(e) {\n    var code = e.keyCode || e.which;\n\n    if (code == 13) {\n      this.sendMessage();\n    }\n  },\n  sendMessage: function sendMessage() {\n    if (this.chatroom_model) {\n      if (this.friendInChat == undefined) {\n        this.select_chatroom_connection().send({\n          messageContent: $(\"#input_content\").val()\n        });\n      }\n    } else if ($(\"#chat-top-bar > p#center\").attr(\"friend-chat-open\") != undefined) {\n      this.select_user_connection().send({\n        recipient: $(\"#chat-top-bar > p#center\").html(),\n        messageContent: $(\"#input_content\").val()\n      });\n    }\n\n    $(\"#input_content\").val(\"\");\n  },\n  render: function render() {\n    var self = this;\n\n    if (this.chatroom_model) {\n      channel_gen(\"ChatChannel\", this.chatroom_model.get(\"name\"), \"\", undefined);\n    }\n\n    this.$el.html('<div id=\"chat-message\">\\\n            <div id=\"chat-top-bar\">\\\n                <p id=\"center\">no chatroom selected</p>\\\n            </div>\\\n            <ul id=\"message-container\">\\\n            </ul>\\\n            <div id=\"inputs\">\\\n                <input type=\"text\" id=\"input_content\" placeholder=\"your message...\">\\\n                <button id=\"input-button\">send</button>\\\n            </div>\\\n        </div> ');\n\n    if (this.friendInChat != undefined) {\n      $(\"#chat-top-bar > p#center\").attr(\"friend-chat-open\", \"true\");\n    }\n\n    if (this.chatroom_model) {\n      $(\"#chat-top-bar > p#center\").html(this.chatroom_model.get(\"name\"));\n      this.message_model.fetch({\n        data: {\n          chatroom_name: this.chatroom_model.get(\"name\")\n        }\n      }).then(function () {\n        self.message_model.each(function (message) {\n          var chatMessageView = new ChatMessageView({\n            model: message\n          });\n          self.$el.find(\"#message-container\").append(chatMessageView.render().$el);\n        });\n        $(\"#message-container\").scrollTop($(\"#message-container\")[0].scrollHeight);\n      });\n    } else if (this.notificationInChat == true) {\n      $(\"#chat-top-bar > p#center\").html('notification');\n      self.notifications.fetch().then(function () {\n        self.$el.find(\"#message-container\").html('');\n        self.notifications.each(function (notification) {\n          var chatNotificationView = new ChatNotificationView({\n            model: notification\n          });\n          self.$el.find(\"#message-container\").append(chatNotificationView.render().$el);\n        });\n        $(\".accept-notification\").click(function (e) {\n          if ($(e.currentTarget).html() == '✓') {\n            var friend = new Friend({\n              id: $(e.currentTarget).prev().html(),\n              order: 'accept-invitation'\n            });\n            friend.save().then(function () {\n              self.bus.trigger(\"refreshFriendsList\", self);\n              self.render();\n            });\n          } else if ($(e.currentTarget).html() == '⚔') {\n            var battle = new Battle({\n              id: $(e.currentTarget).prev().html(),\n              type_battle: 'casual'\n            });\n            battle.save().then(function (res) {\n              if (res && res[\"error\"]) alert(\"user not connected\");\n              self.render();\n            });\n          }\n        });\n        $(\".decline-notification\").click(function (e) {\n          if ($(e.currentTarget).prev().html() == '✓') {\n            var friend = new Friend({\n              id: $(e.currentTarget).prev().prev().html(),\n              order: 'decline-invitation'\n            });\n            friend.save().then(function () {\n              self.bus.trigger(\"refreshFriendsList\", self);\n              self.render();\n            });\n          } else if ($(e.currentTarget).prev().html() == '⚔') {\n            var battle = new Battle({\n              id: $(e.currentTarget).prev().prev().html()\n            });\n            battle.destroy({\n              data: {\n                type_battle: 'casual'\n              },\n              processData: true\n            }).then(function () {\n              self.render();\n            });\n          }\n        });\n      });\n    } else if (this.friendInChat != undefined) {\n      var self = this;\n      $(\"#chat-top-bar > p#center\").html(this.friendInChat);\n      this.friendsMessages.fetch().then(function () {\n        self.friendsMessages.each(function (friendMessage) {\n          var chatFriendMessageView = new ChatFriendMessageView({\n            model: friendMessage\n          });\n          self.$el.find(\"#message-container\").append(chatFriendMessageView.render().$el);\n        });\n        $(\"#message-container\").scrollTop($(\"#message-container\")[0].scrollHeight);\n      });\n    }\n\n    return this;\n  }\n});\nexport { ChatViews };","map":{"version":3,"sources":["/home/mathis/Documents/dede/app/javascript/BackboneViews/ChatView.js"],"names":["channel_gen","consumer","Friend","Friends","Battle","Battles","FriendsMessage","FriendsMessages","ChatFriendMessageView","Backbone","View","extend","render","date","Date","model","get","date_string","getDate","getMonth","getFullYear","getHours","getMinutes","$el","html","ChatMessageView","ChatNotificationView","undefined","ChatViews","el","disconnected","room","i","subscriptions","length","JSON","parse","identifier","channel","unsubscribe","initialize","options","notificationInChat","friendInChat","bus","on","chatroomSelected","chatroomRefresh","notificationReceived","notificationSelected","friendChatroomSelected","friendChatroomRefresh","leaveChatroom","message_model","notifications","friendsMessages","select_chatroom_connection","chatroom_model","data","select_user_connection","chatroom","needToDisconnect","self","fetch","then","$","addClass","removeClass","friend","chatroom_name","events","onClick","sendMessage","keyDown","e","code","keyCode","which","send","messageContent","val","attr","recipient","each","message","chatMessageView","find","append","scrollTop","scrollHeight","notification","chatNotificationView","click","currentTarget","id","prev","order","save","trigger","battle","type_battle","res","alert","destroy","processData","friendMessage","chatFriendMessageView"],"mappings":"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","sourcesContent":["import { channel_gen } from \"../channels/chat_channel\"\nimport consumer from \"../channels/consumer\"\nimport { Friend, Friends } from \"../BackboneModel/friend_list_model\"\nimport { Battle, Battles } from \"../BackboneModel/battle_list_model\"\nimport { FriendsMessage, FriendsMessages } from \"../BackboneModel/friends_message_model\"\n\nvar ChatFriendMessageView = Backbone.View.extend({\n\n    render: function () {\n        var date = new Date(this.model.get(\"date\"));\n        var date_string = date.getDate() + '/' + date.getMonth() + '/' + date.getFullYear() + '  ' + date.getHours() + ':' + date.getMinutes();\n\n        this.$el.html('<li class=\"message\"><p class=\"user-message\">' + this.model.get(\"username\") + '</p><p class=\"time-message\">' + date_string + '</p><br><p class=\"content-message\">' + this.model.get(\"content\") + '</p></li>')\n        return this;\n    }\n});\n\nvar ChatMessageView = Backbone.View.extend({\n\n    render: function () {\n        var date = new Date(this.model.get(\"date\"));\n        var date_string = date.getDate() + '/' + date.getMonth() + '/' + date.getFullYear() + '  ' + date.getHours() + ':' + date.getMinutes();\n\n        this.$el.html('<li class=\"message\"><p class=\"user-message\">' + this.model.get(\"username\") + '</p><p class=\"time-message\">' + date_string + '</p><br><p class=\"content-message\">' + this.model.get(\"content\") + '</p></li>')\n        return this;\n    }\n});\n\nvar ChatNotificationView = Backbone.View.extend({\n\n    render: function () {\n        var date = new Date(this.model.get(\"date\"));\n        var date_string = date.getDate() + '/' + date.getMonth() + '/' + date.getFullYear() + '  ' + date.getHours() + ':' + date.getMinutes();\n        \n        if (this.model.get(\"type\") != undefined) {\n            if (this.model.get(\"type\") == 'friend-request') {\n                this.$el.html('<li class=\"notification\"><p class=\"time-notification-message\">' + date_string + '</p><br><p class=\"content-notification\">' + this.model.get(\"value\") + '</p><p class=\"accept-notification social-hover\">✓</p><p class=\"decline-notification social-hover\">✖</p></li>')\n            }\n            else if (this.model.get(\"type\") == 'casual-battle') {\n                this.$el.html('<li class=\"notification\"><p class=\"time-notification-message\">' + date_string + '</p><br><p class=\"content-notification\">' + this.model.get(\"value\") + '</p><p class=\"accept-notification social-hover\">⚔</p><p class=\"decline-notification social-hover\">✖</p></li>')\n            }\n        }\n        return this;\n    }\n});\n\nvar ChatViews = Backbone.View.extend({\n    el: \".chat-message\",\n\n    disconnected: function (room) {\n        if (room != undefined) {\n            for (var i = 0; i < consumer.subscriptions.subscriptions.length; i++) {\n                if (JSON.parse(consumer.subscriptions.subscriptions[i].identifier).room == room &&\n                JSON.parse(consumer.subscriptions.subscriptions[i].identifier).channel == \"ChatChannel\") {\n                    consumer.subscriptions.subscriptions[i].unsubscribe();\n                };\n            };\n        }\n    },\n\n    initialize: function (options) {\n        this.notificationInChat = false;\n        this.friendInChat = undefined;\n        this.bus = options.bus;\n        this.bus.on(\"chatroomSelected\", this.chatroomSelected, this);\n        this.bus.on(\"chatroomRefresh\", this.chatroomRefresh, this);\n        this.bus.on(\"notificationReceived\", this.notificationReceived, this);\n        this.bus.on(\"notificationSelected\", this.notificationSelected, this);\n        this.bus.on(\"friendChatroomSelected\", this.friendChatroomSelected, this);\n        this.bus.on(\"friendChatroomRefresh\", this.friendChatroomRefresh, this);\n        this.bus.on(\"leaveChatroom\", this.leaveChatroom, this);\n        this.message_model = options.message_model;\n        this.notifications = options.notifications;\n        this.friendsMessages = options.friendsMessages;\n    },\n\n    select_chatroom_connection: function () {\n        if (this.chatroom_model != undefined) {\n            for (var i = 0; i < consumer.subscriptions.subscriptions.length; i++) {\n                if (JSON.parse(consumer.subscriptions.subscriptions[i].identifier).room == this.chatroom_model.get(\"name\") &&\n                JSON.parse(consumer.subscriptions.subscriptions[i].identifier).channel == \"ChatChannel\") {\n                    return (consumer.subscriptions.subscriptions[i]);\n                };\n            };\n        }\n    },\n\n    chatroomRefresh: function (data) {\n        if (this.chatroom_model != undefined && data[\"messageContent\"] == this.chatroom_model.get(\"name\"))\n            this.render()\n    },\n\n    select_user_connection: function () {\n        for (var i = 0; i < consumer.subscriptions.subscriptions.length; i++) {\n            if (JSON.parse(consumer.subscriptions.subscriptions[i].identifier).channel == 'UserChannel') {\n                return (consumer.subscriptions.subscriptions[i]);\n            };\n        };\n    },\n\n    chatroomSelected: function (chatroom) {\n        this.notificationInChat = false;\n        this.friendInChat = undefined;\n        var needToDisconnect = this.chatroom_model == undefined;\n        if (needToDisconnect || chatroom.get(\"name\") != this.chatroom_model.get(\"name\")) {\n            if (!needToDisconnect) {\n                this.disconnected(this.chatroom_model.get(\"name\"));\n            }\n            this.chatroom_model = chatroom;\n            this.render();\n        }\n    },\n\n    friendChatroomRefresh: function () {\n        this.render()\n    },\n\n    notificationReceived: function () {\n        var self = this;\n        self.notifications.fetch().then(function () {\n            if (self.notifications.length > 0) {\n                $(\".title-notification\").addClass(\"notification-blink\")\n            } else {\n                $(\".title-notification\").removeClass(\"notification-blink\")\n            }\n        })\n    },\n\n    notificationSelected: function () {\n        this.notificationInChat = true;\n        this.friendInChat = undefined;\n        if (this.chatroom_model != undefined) {\n            this.disconnected(this.chatroom_model.get(\"name\"));\n            this.chatroom_model = undefined;\n        }\n        $(\".title-notification\").removeClass(\"notification-blink\")\n        this.render();\n    },\n\n    friendChatroomSelected: function (friend) {\n        this.friendInChat = friend.get(\"pseudo\");\n        this.notificationInChat = false;\n        if (this.chatroom_model != undefined) {\n            this.disconnected(this.chatroom_model.get(\"name\"));\n            this.chatroom_model = undefined;\n        }\n        $(\"#chat-top-bar > p#center\").data(\"friend-chat-open\", \"true\");\n        this.render();\n    },\n\n    leaveChatroom: function (chatroom_name) {\n        this.notificationInChat = false;\n        if (this.chatroom_model && this.chatroom_model.get(\"name\") == chatroom_name) {\n            this.disconnected(chatroom_name);\n            this.chatroom_model = undefined;\n            this.notificationInChat = false;\n            this.render();\n        }\n    },\n\n    events: {\n        \"click #input-button\": \"onClick\",\n        \"keydown\": \"keyDown\"\n    },\n\n    onClick: function () {\n        this.sendMessage();\n    },\n\n    keyDown: function (e) {\n        var code = e.keyCode || e.which;\n        if (code == 13) {\n            this.sendMessage();\n        }\n    },\n\n    sendMessage: function () {\n        if (this.chatroom_model) {\n            if (this.friendInChat == undefined) {\n                this.select_chatroom_connection().send({ messageContent: $(\"#input_content\").val() })\n            }\n        } else if ($(\"#chat-top-bar > p#center\").attr(\"friend-chat-open\") != undefined) {\n            this.select_user_connection().send({ recipient: $(\"#chat-top-bar > p#center\").html() , messageContent: $(\"#input_content\").val() })\n        }\n        $(\"#input_content\").val(\"\");\n    },\n\n    render: function () {\n        var self = this;\n        if (this.chatroom_model) {\n            channel_gen(\"ChatChannel\", this.chatroom_model.get(\"name\"), \"\", undefined);\n        }\n\n        this.$el.html('<div id=\"chat-message\">\\\n            <div id=\"chat-top-bar\">\\\n                <p id=\"center\">no chatroom selected</p>\\\n            </div>\\\n            <ul id=\"message-container\">\\\n            </ul>\\\n            <div id=\"inputs\">\\\n                <input type=\"text\" id=\"input_content\" placeholder=\"your message...\">\\\n                <button id=\"input-button\">send</button>\\\n            </div>\\\n        </div> ');\n\n        if (this.friendInChat != undefined) {\n            $(\"#chat-top-bar > p#center\").attr(\"friend-chat-open\", \"true\");\n        }\n\n        if (this.chatroom_model) {\n            $(\"#chat-top-bar > p#center\").html(this.chatroom_model.get(\"name\"))\n            this.message_model.fetch({ data: { chatroom_name: this.chatroom_model.get(\"name\") } }).then(function () {\n                self.message_model.each(function (message) {\n                    var chatMessageView = new ChatMessageView({ model: message })\n                    self.$el.find(\"#message-container\").append(chatMessageView.render().$el);\n                })\n                $(\"#message-container\").scrollTop($(\"#message-container\")[0].scrollHeight);\n            });\n        }\n        else if (this.notificationInChat == true) {\n            $(\"#chat-top-bar > p#center\").html('notification')\n            self.notifications.fetch().then(function () {\n                self.$el.find(\"#message-container\").html('')\n                self.notifications.each(function (notification) {\n                    var chatNotificationView = new ChatNotificationView({ model: notification })\n                    self.$el.find(\"#message-container\").append(chatNotificationView.render().$el);\n                })\n                $(\".accept-notification\").click(function (e) {\n                    if ($(e.currentTarget).html() == '✓') {\n                        var friend = new Friend({ id: $(e.currentTarget).prev().html(), order: 'accept-invitation' })\n                        friend.save().then(function () {\n                            self.bus.trigger(\"refreshFriendsList\", self)\n                            self.render();\n                        })\n                    }\n                    else if ($(e.currentTarget).html() == '⚔') {\n                        var battle = new Battle({ id: $(e.currentTarget).prev().html(), type_battle: 'casual' })\n                        battle.save().then((res)=> {\n                            if (res && res[\"error\"])\n                                alert(\"user not connected\");\n                            self.render();\n                        })\n                    }\n                })\n                $(\".decline-notification\").click(function (e) {\n                    if ($(e.currentTarget).prev().html() == '✓') {\n                        var friend = new Friend({ id: $(e.currentTarget).prev().prev().html(), order: 'decline-invitation' })\n                        friend.save().then(function () {\n                            self.bus.trigger(\"refreshFriendsList\", self)\n                            self.render();\n                        })\n                    }\n                    else if ($(e.currentTarget).prev().html() == '⚔') {\n                        var battle = new Battle({ id: $(e.currentTarget).prev().prev().html() })\n                        battle.destroy({ data: { type_battle: 'casual' }, processData: true }).then(function () {\n                            self.render();\n                        })\n                    }\n                })\n            })\n        }\n        else if (this.friendInChat != undefined) {\n            var self = this;\n            $(\"#chat-top-bar > p#center\").html(this.friendInChat)\n            this.friendsMessages.fetch().then(function () {\n                self.friendsMessages.each(function (friendMessage) {\n                    var chatFriendMessageView = new ChatFriendMessageView({ model: friendMessage })\n                    self.$el.find(\"#message-container\").append(chatFriendMessageView.render().$el);\n                })\n                $(\"#message-container\").scrollTop($(\"#message-container\")[0].scrollHeight);\n            })\n        }\n        return this;\n    }\n})\n\nexport { ChatViews }\n"]},"metadata":{},"sourceType":"module"}